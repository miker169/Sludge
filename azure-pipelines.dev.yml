# Node.js with React

# Build a Node.js project that uses React.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

pr: ['develop']

trigger:
- develop

variables:
  projectFolder: 'yw_react_fe/yw-fe'
  buildOutputFolder: "yw_react_fe/yw-fe/build"
  deploymentFolder: "yw_react_fe/yw-fe/deployment"
  fontsFolder: "yw_react_fe/yw-fe/src/fonts"
  react_app_run_model_url: 'https://ywwwbackenddev.azurewebsites.net/api/standard-model-trigger?code=N1NwgKdG9NlmR69v6steAJ9doQmPjSOaX1yGMneuaxT1qAQWRyaX3g=='
  react_app_blob_sas: 'https://ywwwdatastoredev.blob.core.windows.net/?sv=2019-10-10&ss=bfqt&srt=sco&sp=rwdlacupx&se=2020-08-11T17:11:02Z&st=2020-05-11T09:11:02Z&spr=https&sig=ZbZXVNMKShvoJvZnxhLU4rLsvVhyqUGwhlX41Kf4CAc%3D'
  react_app_get_results: 'https://ywwwbackenddev.azurewebsites.net/api/file-download?code=BwJZKLBb8Gp1rbxAmnwb8lMW0vArp2RXMa4TQO4bEaU4KS9jb/b0uQ=='
  react_app_get_json: 'https://ywwwbackenddev.azurewebsites.net/api/file-upload?code=UcpdLUzclgiW6frMKBseOXYmFVoxNnr39FOMN3x8hnmJEZ0BXxWXxA=='
pool:
  vmImage: 'ubuntu-latest'


steps:

- task: NodeTool@0
  inputs:
    versionSpec: '10.x'
  displayName: 'Install Node.js'

- script: |
    pushd $(projectFolder) && yarn install && popd
    pushd $(projectFolder) && yarn run test-ci && popd
    pushd $(projectFolder) && yarn run build && popd

  displayName: 'yarn install and build'

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '$(System.DefaultWorkingDirectory)/$(projectFolder)/output/jestTestresults.trx'
    failTaskOnFailedTests: true


- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/$(projectFolder)/output/*coverage.xml'
    reportDirectory: '$(System.DefaultWorkingDirectory)/$(projectFolder)/output'
    pathToSources: '$(System.DefaultWorkingDirectory)/$(projectFolder)/output/src'

- task: CopyFiles@2
  inputs:
    sourceFolder: '$(buildOutputFolder)' 
    contents: '**/*' 
    targetFolder: '$(Build.ArtifactStagingDirectory)/output'
    cleanTargetFolder: true

- task: CopyFiles@2
  inputs:
    sourceFolder: '$(fontsFolder)' 
    contents: '**/*' 
    targetFolder: '$(Build.ArtifactStagingDirectory)/output/fonts'
    cleanTargetFolder: true

- task: CopyFiles@2
  inputs:
    sourceFolder: '$(deploymentFolder)'
    contents: '**/*' 
    targetFolder: '$(Build.ArtifactStagingDirectory)/deployment'
    cleanTargetFolder: true

# Archive the files into a zip file for publishing
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifacts'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'devDrop'



